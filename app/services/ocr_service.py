# app/services/ocr_service.py

import os
import cv2
import pandas as pd
import numpy as np
from tqdm import tqdm
from paddleocr import PaddleOCR
from .pdf_service import find_text_coordinates, extract_text_from_coords


def perform_ocr_on_detections_and_export(detection_results: list, output_excel_path: str,
                                         pdf_path: str, reference_text: str, reference_page: int,
                                         class_names: list):
    """ÌÉêÏßÄÎêú Í∞ùÏ≤¥Îì§Ïóê ÎåÄÌï¥ Î©îÎ™®Î¶¨ÏóêÏÑú ÏßÅÏ†ë OCRÏùÑ ÏàòÌñâÌïòÍ≥† Í≤∞Í≥ºÎ•º ÏóëÏÖÄ ÌååÏùºÎ°ú Ï†ÄÏû•Ìï©ÎãàÎã§."""

    # PID NO Ï∂îÏ∂ú Î°úÏßÅ
    pid_no_map = {}
    print(f"Í∏∞Ï§Ä ÌÖçÏä§Ìä∏ '{reference_text}'Ïùò Ï¢åÌëúÎ•º {reference_page} ÌéòÏù¥ÏßÄÏóêÏÑú Ï∞æÎäî Ï§ë...")
    pid_no_coords = find_text_coordinates(pdf_path, reference_text, reference_page)

    if not pid_no_coords:
        print("‚ö†Ô∏è Í∏∞Ï§Ä ÌÖçÏä§Ìä∏Ïùò Ï¢åÌëúÎ•º Ï∞æÏßÄ Î™ªÌï¥ PID NO Ï∂îÏ∂úÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§.")
    else:
        print(f"Ï¢åÌëú Ï∞æÏùå: {pid_no_coords}. Î™®Îì† ÌéòÏù¥ÏßÄÏóêÏÑú Ìï¥Îãπ Ï¢åÌëúÏùò PID NOÎ•º Ï∂îÏ∂úÌï©ÎãàÎã§.")
        import fitz
        doc = fitz.open(pdf_path)
        for i, page in enumerate(doc):
            page_key = f"page_{i:03d}"
            pid_no = extract_text_from_coords(pdf_path, i, pid_no_coords, reference_text)
            pid_no_map[page_key] = pid_no
        doc.close()

    # PaddleOCR Ï¥àÍ∏∞Ìôî
    print("PaddleOCR Î™®Îç∏ÏùÑ Î°úÎìú Ï§ëÏûÖÎãàÎã§...")
    ocr = PaddleOCR(use_doc_orientation_classify=False, use_doc_unwarping=False, use_textline_orientation=False)

    ocr_results = []
    total_detections = sum(len(result.get('detections', [])) for result in detection_results if result['success'])

    if total_detections == 0:
        print("‚ö†Ô∏è ÌÉêÏßÄÎêú Í∞ùÏ≤¥Í∞Ä ÏóÜÏñ¥ OCRÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§.")
        # Îπà ÏóëÏÖÄ ÌååÏùº ÏÉùÏÑ±
        df = pd.DataFrame(
            columns=["PID NO", "Original Page", "Object Index", "Class Name", "Detection Score", "Recognized Text"])
        df.to_excel(output_excel_path, index=False, engine='openpyxl')
        return

    print(f"üìù Ï¥ù {total_detections}Í∞ú ÌÉêÏßÄÎêú Í∞ùÏ≤¥Ïóê ÎåÄÌï¥ OCR ÏàòÌñâ Ï§ë...")

    processed_count = 0

    for result in tqdm(detection_results, desc="ÌéòÏù¥ÏßÄÎ≥Ñ OCR Ï≤òÎ¶¨"):
        if not result['success'] or not result.get('detections'):
            continue

        image_path = result['image_path']
        detections = result['detections']

        # ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ Î°úÎìú
        full_image = cv2.imread(image_path)
        if full_image is None:
            print(f"‚ö†Ô∏è Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå®: {image_path}")
            continue

        # Ïù¥ÎØ∏ÏßÄ ÌååÏùºÎ™ÖÏóêÏÑú ÌéòÏù¥ÏßÄ Ï†ïÎ≥¥ Ï∂îÏ∂ú
        base_name = os.path.splitext(os.path.basename(image_path))[0]  # "page_000" ÌòïÌÉú
        original_page_key = base_name

        # Ìï¥Îãπ ÌéòÏù¥ÏßÄÏùò PID NO Í∞ÄÏ†∏Ïò§Í∏∞
        pid_no = pid_no_map.get(original_page_key, "N/A")

        # Í∞Å ÌÉêÏßÄÎêú Í∞ùÏ≤¥Ïóê ÎåÄÌï¥ OCR ÏàòÌñâ
        for obj_idx, (x1, y1, x2, y2, score, label_id) in enumerate(detections):
            try:
                # Î©îÎ™®Î¶¨ÏóêÏÑú ÏßÅÏ†ë crop
                cropped_img = full_image[y1:y2, x1:x2]

                if cropped_img.shape[0] == 0 or cropped_img.shape[1] == 0:
                    print(f"‚ö†Ô∏è ÏûòÎ™ªÎêú crop ÌÅ¨Í∏∞: {image_path}, Í∞ùÏ≤¥ {obj_idx}")
                    continue

                # OCR ÏàòÌñâ (Î©îÎ™®Î¶¨Ïùò numpy Î∞∞Ïó¥ÏóêÏÑú ÏßÅÏ†ë)
                # PaddleOCRÏùÄ numpy Î∞∞Ïó¥ÏùÑ ÏßÅÏ†ë Î∞õÏùÑ Ïàò ÏûàÏäµÎãàÎã§
                ocr_result = ocr.ocr(cropped_img)

                recognized_text = ""
                if ocr_result and len(ocr_result) > 0:
                    # ÎîîÎ≤ÑÍπÖ Ï∂úÎ†• Ï†úÍ±∞ÌïòÍ≥† Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÌååÏã±
                    result_data = ocr_result[0]

                    # Í≤∞Í≥ºÍ∞Ä ÎîïÏÖîÎÑàÎ¶¨ ÌòïÌÉúÏù∏ Í≤ΩÏö∞ (Ïã§Ï†ú ÌôïÏù∏Îêú ÌòïÌÉú)
                    if isinstance(result_data, dict):
                        if 'rec_texts' in result_data:
                            # rec_texts ÌïÑÎìúÏóêÏÑú ÏßÅÏ†ë ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
                            texts = result_data['rec_texts']
                            if isinstance(texts, list):
                                recognized_text = " ".join(str(text) for text in texts)
                            else:
                                recognized_text = str(texts)

                    # Í≤∞Í≥ºÍ∞Ä Î¶¨Ïä§Ìä∏ ÌòïÌÉúÏù∏ Í≤ΩÏö∞ (ÏùºÎ∞òÏ†ÅÏù∏ PaddleOCR ÌòïÌÉú)
                    elif isinstance(result_data, list):
                        texts = []
                        for line in result_data:
                            if isinstance(line, list) and len(line) >= 2:
                                # [[[Ï¢åÌëú]], (ÌÖçÏä§Ìä∏, Ïã†Î¢∞ÎèÑ)] ÌòïÌÉú
                                if isinstance(line[1], tuple) and len(line[1]) >= 1:
                                    texts.append(str(line[1][0]))
                                elif isinstance(line[1], str):
                                    texts.append(line[1])
                        recognized_text = " ".join(texts)

                class_name = class_names[int(label_id)]

                ocr_results.append({
                    "PID NO": pid_no,
                    "Original Page": original_page_key,
                    "Object Index": obj_idx,
                    "Class Name": class_name,
                    "Detection Score": round(score, 3),
                    "Recognized Text": recognized_text.strip()
                })

                processed_count += 1

            except Exception as e:
                print(f"‚ö†Ô∏è OCR Ï≤òÎ¶¨ Ïò§Î•ò ({image_path}, Í∞ùÏ≤¥ {obj_idx}): {e}")
                ocr_results.append({
                    "PID NO": pid_no,
                    "Original Page": original_page_key,
                    "Object Index": obj_idx,
                    "Class Name": class_names[int(label_id)] if int(label_id) < len(class_names) else "Unknown",
                    "Detection Score": round(score, 3),
                    "Recognized Text": f"OCR Error: {e}"
                })

    # Í≤∞Í≥ºÎ•º ÏóëÏÖÄÎ°ú Ï†ÄÏû•
    if ocr_results:
        df = pd.DataFrame(ocr_results)
        column_order = ["PID NO", "Original Page", "Object Index", "Class Name", "Detection Score", "Recognized Text"]
        df = df[column_order]
        df.to_excel(output_excel_path, index=False, engine='openpyxl')
        print(f"\n‚úÖ OCR Í≤∞Í≥ºÍ∞Ä '{output_excel_path}' ÌååÏùºÏóê ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.")
        print(f"üìä Ï¥ù {len(ocr_results)}Í∞ú Í∞ùÏ≤¥ Ï≤òÎ¶¨ ÏôÑÎ£å")
    else:
        print("‚ö†Ô∏è OCRÏùÑ ÏàòÌñâÌï† Í∞ùÏ≤¥Í∞Ä ÏóÜÍ±∞ÎÇò Í≤∞Í≥ºÎ•º Ï≤òÎ¶¨ÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§.")


# ‚ú® Í∏∞Ï°¥ Ìï®ÏàòÎäî ÌïòÏúÑ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ Ïú†ÏßÄ (ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå)
def perform_ocr_on_crops_and_export(cropped_images_dir: str, output_excel_path: str,
                                    pdf_path: str, reference_text: str, reference_page: int):
    """Í∏∞Ï°¥ Î∞©Ïãù - ÌïòÏúÑ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ Ïú†ÏßÄ"""
    print("‚ö†Ô∏è Í∏∞Ï°¥ Î∞©ÏãùÏùò OCR Ìï®ÏàòÍ∞Ä Ìò∏Ï∂úÎêòÏóàÏäµÎãàÎã§. ÏÉàÎ°úÏö¥ ÏµúÏ†ÅÌôîÎêú Î∞©ÏãùÏùÑ ÏÇ¨Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.")
    pass